name: MM-ROBOT-DISABLE-HUNG-TASK

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

on:
  schedule:
     - cron: '*/15 * * * *'  # Runs every 15 minutes.

env:
  BRANCH: lance
  REPO: https://github.com/ioworker0/linux.git
  FEAT: HUNGTASK

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          path: robot

      - name: system resources
        run: |      
          uname -r && uname -m && echo $(nproc) && free -h

      - name: check against the commit ID
        run: |
          cd robot
          export PREVIOUS_COMMIT_ID=$(cat ${{ env.BRANCH }}_${{ env.FEAT }}_previous_commit_id.txt)
          export LATEST_COMMIT_ID=$(git ls-remote ${{ env.REPO }} refs/heads/${{ env.BRANCH }} | awk '{print $1}')
          if [ "$PREVIOUS_COMMIT_ID" = "$LATEST_COMMIT_ID" ]; then
            echo "Commit ID has not changed. No action needed :P"
            echo "condition=false" >> $GITHUB_ENV
            exit 0
          else
            echo $LATEST_COMMIT_ID > ${{ env.BRANCH }}_${{ env.FEAT }}_previous_commit_id.txt
            git config --global user.email "actions@github.com"
            git config --global user.name "GitHub Actions"
            git add ${{ env.BRANCH }}_${{ env.FEAT }}_previous_commit_id.txt
            git commit -m "Update previous commit ID"
            git push origin main
            echo "condition=true" >> $GITHUB_ENV
          fi

      - uses: actions/cache@v4
        if: env.condition == 'true'
        id: repo-cache
        with:
          path: .
          key: linux
    
      - name: clone repo
        if: steps.repo-cache.outputs.cache-hit != 'true' && env.condition == 'true'
        run: |
          ls -l
          git clone -v ${{ env.REPO }} linux
          
      - name: pre-clean up
        if: env.condition == 'true'
        run: |
          cd linux
          git checkout master
          if git rev-parse --verify ${{ env.BRANCH }} >/dev/null 2>&1; then
            git branch -D ${{ env.BRANCH }}
          else
            echo "Branch ${{ env.BRANCH }} does not exist."
          fi
          make clean
          rm -rf .config*
          
      - name: pull branch
        if: env.condition == 'true'
        run: |
          cd linux && git pull && git checkout ${{ env.BRANCH }} && git pull

      - name: pre-build kernel x86-64
        if: env.condition == 'true'
        run: |  
          sudo apt-get install -y libelf-dev libdwarf-dev libdw-dev

      - name: build kernel x86-64 w/o CONFIG_DETECT_HUNG_TASK
        if: env.condition == 'true'
        run: |  
          cd linux
          cp $(ls /boot/config-* | shuf -n 1) .config
          sed -i 's/^# CONFIG_KASAN is not set/CONFIG_KASAN=y/' .config
          sed -i 's/^# CONFIG_KCSAN is not set/CONFIG_KCSAN=y/' .config
          sed -i 's/^CONFIG_DETECT_HUNG_TASK=y/# CONFIG_DETECT_HUNG_TASK is not set/' .config
          sed -i 's/^CONFIG_DETECT_HUNG_TASK_BLOCKER=y/# CONFIG_DETECT_HUNG_TASK_BLOCKER is not set/' .config
          make olddefconfig
          sed -i '/^CONFIG_SYSTEM_TRUSTED_KEYS=.*/s/.*/CONFIG_SYSTEM_TRUSTED_KEYS=""/' .config
          sed -i '/^CONFIG_SYSTEM_REVOCATION_KEYS=.*/s/.*/CONFIG_SYSTEM_REVOCATION_KEYS=""/' .config
          cat .config | grep CONFIG_MM_ID
          cat .config | grep CONFIG_TRANSPARENT_HUGEPAGE
          make -j$(nproc) bzImage

      - name: post-build kernel x86-64 w/o CONFIG_DETECT_HUNG_TASK
        if: env.condition == 'true'
        run: |  
          cd linux
          make clean
          rm -rf .config*

      - name: post-build kernel x86-64
        if: env.condition == 'true'
        run: |  
          cd linux
          make clean
          rm -rf .config*
